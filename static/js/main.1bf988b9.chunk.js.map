{"version":3,"sources":["Components/Coin.jsx","Components/BoardPosition.jsx","Components/MakeAMoveColumns.jsx","Components/PlayBoard.jsx","Components/initial-board-state.js","Components/WinnerDisplay/WinnerDisplay.jsx","Components/connect4Brain.js","Components/Board.jsx","App.js","serviceWorker.js","index.js"],"names":["StyledCoin","styled","div","_templateObject","props","stateOfPosition","Coin","TweenMax","fromTo","this","coin","top","_this","react_default","a","createElement","ref","node","React","Component","StyledBoardPosition","BoardPosition_templateObject","BoardPosition","_ref","className","Coin_Coin","StyledMakeAMoveColumns","MakeAMoveColumns_templateObject","StyledMakeAMoveColumn","_templateObject2","disabled","MakeAMoveColumns","possiblePlays","playATurn","map","possiblePlay","index","onClick","Column","key","StyledPlayBoard","PlayBoard_templateObject","StyledPlayBoardRow","PlayBoard_templateObject2","PlayBoard","boardState","console","log","row","position","initBoardState","WinnerDisplay","winner","resetGame","concat","playerNumber","opponentPlayerNumber","basedOnMeMultiplier","basedOnMeOneMatchScore","basedOnMeTwoMatchScore","basedOnMeThreeMatchScore","basedOnOppenentMultiplier","basedOnOppenentOneMatchScore","basedOnOppenentTwoMatchScore","basedOnOppenentThreeMatchScore","basedOnNoPlayMultiplier","basedOnNoPlayOneMatchScore","basedOnNoPlayTwoMatchScore","basedOnNoPlayThreeMatchScore","initState","board","currentHeightofRows","StyledBoard","Board_templateObject","Board","state","usersColumnToPlay","disableTakingATurn","makeAMove","computersTurn","setTimeout","computersPlay","isRight","colPos","rowPos","player","isLeft","isDown","isUpRight","isUpLeft","isDownRight","isDownLeft","getScore","numberMatches","oneMatchScore","twoMatchScore","threeMatchScore","valueOfPlaysBoard","yIndex","spot","xIndex","getValueOfSpot","checkFor","multiplier","leftMatch","rightMatch","horizontalScore","vertical","verticalScore","upRightMatch","downLeftMatch","positiveSlopeScore","upLeftMatch","downRightMatch","table","maxXIndex","max","forEach","decideOnPlay","updatePossiblePlays","isWinner","cP","rP","pP","fdc","sdc","columnToPlay","arguments","length","undefined","callBack","rowToPlay","setState","currentState","rowArr","rowIndex","colNum","colIndex","currentHeight","StyledApp","App_templateObject","App","Board_Board","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"koBAIA,IAAMA,EAAaC,IAAOC,IAAVC,IAGE,SAAAC,GAAK,OAA6B,IAAxBA,EAAMC,gBAAqB,QAAS,QAW3CC,8LAGbC,IAASC,OAAOC,KAAKC,KAAM,GAAI,CAAEC,KAAM,KAAO,CAAEA,IAAK,qCAGjD,IAAAC,EAAAH,KACJ,OACII,EAAAC,EAAAC,cAACf,EAAD,CACIgB,IAAK,SAAAC,GAAI,OAAKL,EAAKF,KAAOO,GACzBZ,gBAAiBI,KAAKL,MAAMC,yBAVXa,IAAMC,woBCfxC,IAAMC,EAAsBnB,IAAOC,IAAVmB,KAwBV,SAASC,EAATC,GAA0C,IAAlBlB,EAAkBkB,EAAlBlB,gBAEnC,OACIQ,EAAAC,EAAAC,cAAA,OAAKS,UAAU,YAAWX,EAAAC,EAAAC,cAACK,EAAD,MAGG,IAApBf,GAA2BQ,EAAAC,EAAAC,cAACU,EAAD,CAAMpB,gBAAiBA,yVC9BnE,IAAMqB,EAAyBzB,IAAOC,IAAVyB,KAUrBC,EAAwB3B,IAAOC,IAAV2B,IAGN,SAAAzB,GAAK,OAAIA,EAAM0B,SAA4B,OAAnB,qBAI/B,SAASC,EAATR,GAAqD,IAA1BS,EAA0BT,EAA1BS,cAAeC,EAAWV,EAAXU,UAMrD,OACIpB,EAAAC,EAAAC,cAACW,EAAD,KAEQM,EAAcE,IAAI,SAACC,EAAaC,GAAd,OACdvB,EAAAC,EAAAC,cAACa,EAAD,CACIS,QAAS,kBAVRC,EAUwBF,OAAOD,GAR5CF,EAAUK,IAFlB,IAAqBA,GAWDC,IAAKH,EACLZ,UAAS,cACTM,UAAYK,2OC7BpC,IAAMK,EAAkBvC,IAAOC,IAAVuC,KAIfC,EAAqBzC,IAAOC,IAAVyC,KAKT,SAASC,EAATrB,GAA2D,IAAvCsB,EAAuCtB,EAAvCsB,WAAab,EAA0BT,EAA1BS,cAAeC,EAAWV,EAAXU,UAE3D,OADFa,QAAQC,IAAIf,GAENnB,EAAAC,EAAAC,cAACyB,EAAD,KAEMK,EAAWX,IAAI,SAACc,EAAKZ,GACnB,OACEvB,EAAAC,EAAAC,cAAC2B,EAAD,CAAoBH,IAAKH,GAEvBY,EAAId,IAAI,SAACe,EAAUb,GACjB,OAAOvB,EAAAC,EAAAC,cAACO,EAAD,CAAeiB,IAAKH,EAAO/B,gBAAiB4C,SAO/DpC,EAAAC,EAAAC,cAACgB,EAAD,CACEC,cAAeA,EACfC,UAAWA,KCjCvB,IAQeiB,EARS,CACZ,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACb,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACb,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACb,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACb,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACb,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,UCJV,SAASC,EAAT5B,GAA2C,IAAnB6B,EAAmB7B,EAAnB6B,OAAQC,EAAW9B,EAAX8B,UAC3C,OACiB,IAATD,GACAvC,EAAAC,EAAAC,cAAA,OAAKS,UAAU,kBACXX,EAAAC,EAAAC,cAAA,MAAIS,UAAS,uBAAA8B,OAAyBF,IAAtC,UAAAE,OAA2DF,EAA3D,UACAvC,EAAAC,EAAAC,cAAA,UAAQsB,QAASgB,EAAW7B,UAAU,uBAAtC,gBCGhB,IAAM+B,EAAa,EACbC,EAAqB,EAGrBC,EAAsB,EACtBC,EAAyB,EACzBC,EAAyB,EACzBC,EAA2B,KAE3BC,EAA4B,EAC5BC,EAA+B,GAC/BC,EAA+B,EAC/BC,EAAiC,IAEjCC,EAA0B,EAC1BC,EAA6B,EAC7BC,EAA6B,EAC7BC,EAA+B,6OClBrC,IAAMC,EAAW,CACfC,MAAOpB,EACPlB,cAAe,EAAC,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAC9CuC,oBAAqB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAClCnB,OAAQ,GAGJoB,EAAcvE,IAAOC,IAAVuE,KAWIC,6MACnBC,MAAQN,IAERpC,UAAY,SAAC2C,GACXhE,EAAKiE,qBAGLjE,EAAKkE,UAAUF,EAAmB,EAAGhE,EAAKmE,kBAI5CA,cAAgB,SAACT,GACfU,WAAW,WACT,IAAMC,EDXG,SAAsBpC,GAEjC,SAASqC,EAAQC,EAAQC,EAAOC,GAC5B,OAAGxC,EAAWsC,GAAQC,EAAO,KAAKC,EAKtC,SAASC,EAAOH,EAAQC,EAAQC,GAC5B,OAAGxC,EAAWsC,GAAQC,EAAO,KAAKC,EAKtC,SAASE,EAAOJ,EAAQC,EAAQC,GAC5B,SAAGxC,EAAWsC,EAAO,IAAMtC,EAAWsC,EAAO,GAAGC,KAAUC,GAW9D,SAASG,EAAUL,EAAQC,EAAQC,GAC/B,SAAGxC,EAAWsC,EAAO,IAAMtC,EAAWsC,EAAO,GAAGC,EAAO,KAAKC,GAKhE,SAASI,EAASN,EAAQC,EAAQC,GAC9B,SAAGxC,EAAWsC,EAAO,IAAMtC,EAAWsC,EAAO,GAAGC,EAAO,KAAKC,GAKhE,SAASK,EAAYP,EAAQC,EAAQC,GACjC,SAAGxC,EAAWsC,EAAO,IAAMtC,EAAWsC,EAAO,GAAGC,EAAO,KAAKC,GAKhE,SAASM,EAAWR,EAAQC,EAAQC,GAChC,SAAGxC,EAAWsC,EAAO,IAAMtC,EAAWsC,EAAO,GAAGC,EAAO,KAAKC,GAKhE,SAASO,EAASC,EAAcC,EAAcC,EAAcC,GACxD,OAAmB,IAAhBH,EACQC,EACc,IAAhBD,EACEE,EACFF,GAAe,EACbG,EAEJ,EAIX,IAAMC,EAAoBpD,EAAWX,IAAI,SAACc,EAAKkD,GAAN,OACrClD,EAAId,IAAI,SAACiE,EAAMC,GAEX,OAAW,IAAPD,GACQ,MAGRZ,EAAOW,EAAQE,EAAO,IACd,MAKWC,EAAeD,EAAQF,EAAQ3C,EAAcE,EAAqBC,EAAwBC,EAAwBC,GAC3GyC,EAAeD,EAAQF,EAAQ1C,EAAsBK,EAA2BC,EAA8BC,EAA8BC,GACzIqC,EAAeD,EAAQF,EAAQ,EAAIjC,EAAyBC,EAA4BC,EAA4BC,OAI7J,SAASiC,EAAeD,EAAQF,EAAQI,EAAUC,EAAWT,EAAcC,EAAcC,GACrF,IAAIQ,EAAY,EACblB,EAAOY,EAAOE,EAAOE,KACpBE,EAAU,EACPlB,EAAOY,EAAOE,EAAO,EAAEE,KACtBE,EAAU,EACPlB,EAAOY,EAAOE,EAAO,EAAEE,KACtBE,EAAU,KAItB,IAAIC,EAAY,EACbvB,EAAQgB,EAAOE,EAAOE,KACrBG,EAAW,EACRvB,EAAQgB,EAAOE,EAAO,EAAEE,KACvBG,EAAW,EACRvB,EAAQgB,EAAOE,EAAO,EAAEE,KACvBG,EAAW,KAIvB,IAAMC,EAAkBd,EAASa,EAAWD,EAAUV,EAAcC,EAAcC,GAG9EW,EAAS,EACVpB,EAAOW,EAAOE,EAAOE,KACpBK,EAAS,EACNpB,EAAOW,EAAO,EAAEE,EAAOE,KACtBK,EAAS,EACNpB,EAAOW,EAAO,EAAEE,EAAOE,KACtBK,EAAS,KAIrB,IAAOC,EAAgBhB,EAASe,EAASb,EAAcC,EAAcC,GAEjEa,EAAe,EAEhBrB,EAAUU,EAAOE,EAAOE,KACvBO,EAAa,EACVrB,EAAUU,EAAO,EAAEE,EAAO,EAAEE,KAC3BO,EAAa,EACVrB,EAAUU,EAAO,EAAEE,EAAO,EAAEE,KAC3BO,EAAa,KAIzB,IAAIC,EAAgB,EACjBnB,EAAWO,EAAOE,EAAOE,KACxBQ,EAAc,EACXnB,EAAWO,EAAO,EAAEE,EAAO,EAAEE,KAC5BQ,EAAc,EACXnB,EAAWO,EAAO,EAAEE,EAAO,EAAEE,KAC5BQ,EAAc,KAI1B,IAAOC,EAAqBnB,EAASiB,EAAaC,EAAchB,EAAcC,EAAcC,GAGxFgB,EAAc,EACfvB,EAASS,EAAOE,EAAOE,KACtBU,EAAY,EACTvB,EAASS,EAAO,EAAEE,EAAO,EAAEE,KAC1BU,EAAY,EACTvB,EAASS,EAAO,EAAEE,EAAO,EAAEE,KAC3BU,EAAY,KAIvB,IAAIC,EAAiB,EAcrB,OAbGvB,EAAYQ,EAAOE,EAAOE,KACzBW,EAAe,EACZvB,EAAYQ,EAAO,EAAEE,EAAO,EAAEE,KAC7BW,EAAe,EACZvB,EAAYQ,EAAO,EAAEE,EAAO,EAAEE,KAC9BW,EAAe,KAOTL,EAAcL,EAAaG,EAAgBH,EAAaQ,EAAmBR,EAHhEX,EAASoB,EAAYC,EAAenB,EAAcC,EAAcC,GAGgCO,EAGhIzD,QAAQoE,MAAMjB,GAKd,IACIkB,EADAC,EAAK,EAgBT,OAdAnB,EAAkBoB,QAAQ,SAACrE,EAAKkD,GAAN,OACtBlD,EAAIqE,QAAQ,SAAClB,EAAMC,IAEC,QAAVD,GAIHA,GAAMiB,IACLA,EAAIjB,EACJgB,EAAUf,OAItBtD,QAAQC,IAAIoE,GACLA,ECjLiBG,CAAahD,GACnC1D,EAAKkE,UAAUG,EAAe,GAC9BrE,EAAK2G,uBACL,QAKJC,SAAW,SAACC,EAAIC,EAAIC,GAClB,IAAIC,EAAI,EAEJC,EAAI,EACFvD,EAAQ1D,EAAK+D,MAAML,MA4BvB,OA1BGA,EAAMoD,GAAID,EAAG,KAAKE,IACnBC,EAAI,EAEDtD,EAAMoD,GAAID,EAAG,KAAKE,IACnBC,EAAI,EAEDtD,EAAMoD,GAAID,EAAG,KAAKE,IACnBC,EAAI,KAMPtD,EAAMoD,GAAID,EAAG,KAAKE,IACnBE,EAAI,EAEDvD,EAAMoD,GAAID,EAAG,KAAKE,IACnBE,EAAI,EAEDvD,EAAMoD,GAAID,EAAG,KAAKE,IACnBE,EAAI,KAMPD,EAAIC,GAAK,EACHF,EAMND,GAAI,GACFpD,EAAMoD,EAAG,GAAGD,KAAME,GAEhBrD,EAAMoD,EAAG,GAAGD,KAAME,GAEhBrD,EAAMoD,EAAG,GAAGD,KAAME,EACZA,GAMjBC,EAAK,EACLC,EAAK,EAKAvD,EAAMoD,EAAG,IAEPpD,EAAMoD,EAAG,GAAGD,EAAG,KAAME,IACtBC,EAAI,EACDtD,EAAMoD,EAAG,IAEPpD,EAAMoD,EAAG,GAAGD,EAAG,KAAOE,IACvBC,EAAI,EAEDtD,EAAMoD,EAAG,IAEPpD,EAAMoD,EAAG,GAAGD,EAAG,KAAKE,IACrBC,EAAI,KASbtD,EAAMoD,EAAG,IAEPpD,EAAMoD,EAAG,GAAGD,EAAG,KAAME,IACtBE,EAAI,EAEDvD,EAAMoD,EAAG,IAEPpD,EAAMoD,EAAG,GAAGD,EAAG,KAAKE,IACrBE,EAAI,EAEDvD,EAAMoD,EAAG,IAEPpD,EAAMoD,EAAG,GAAGD,EAAG,KAAKE,IACrBE,EAAI,KAObD,EAAIC,GAAK,EACHF,GAGTC,EAAI,EACJC,EAAI,EAIDvD,EAAMoD,EAAG,IAEPpD,EAAMoD,EAAG,GAAGD,EAAG,KAAME,IACtBC,EAAI,EACDtD,EAAMoD,EAAG,IAEPpD,EAAMoD,EAAG,GAAGD,EAAG,KAAOE,IACvBC,EAAI,EAEDtD,EAAMoD,EAAG,IAEPpD,EAAMoD,EAAG,GAAGD,EAAG,KAAKE,IACrBC,EAAI,KAQbtD,EAAMoD,EAAG,IAEPpD,EAAMoD,EAAG,GAAGD,EAAG,KAAME,IACtBE,EAAI,EAEDvD,EAAMoD,EAAG,IAEPpD,EAAMoD,EAAG,GAAGD,EAAG,KAAKE,IACrBE,EAAI,EAEDvD,EAAMoD,EAAG,IAEPpD,EAAMoD,EAAG,GAAGD,EAAG,KAAKE,IACrBE,EAAI,KAObD,EAAIC,GAAK,EACHF,EAEF,OAGX7C,UAAY,SAACgD,GAA4C,IAA9BzC,EAA8B0C,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAvB,EAAGG,EAAoBH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAX,aAEtCI,EAAYvH,EAAK+D,MAAMJ,oBAAoBuD,GACjDlH,EAAKwH,SAAS,SAAAC,GA0BZ,MAAO,CACL/D,MA1BmB+D,EAAa/D,MAAMpC,IAAI,SAACoG,EAAOC,GAElD,OAAGA,IAAaF,EAAa9D,oBAAoBuD,GAExCQ,EAAOpG,IAAI,SAACsG,EAAQC,GACzB,OAAGA,IAAaX,EACPzC,EAGFmD,IAIJF,IAcP/D,oBAXkC8D,EAAa9D,oBAAoBrC,IAAI,SAACwG,EAAeF,GACvF,OAAGA,IAAWV,EACLY,EAAc,EAEhBA,IAQPtF,OALaxC,EAAK4G,SAASM,EAAcK,EAAW9C,KAQtD,WACyB,IAApBzE,EAAK+D,MAAMvB,QACZ8E,EAAStH,EAAK+D,MAAML,MAAO1D,EAAK+D,MAAM3C,oBAQ9CuF,oBAAsB,WACpB3G,EAAKwH,SAAS,SAAAC,GAOZ,MAAO,CACLrG,cAPuBqG,EAAarG,cAAcE,IAAI,SAACC,EAAcsG,GACrE,QAAGJ,EAAa9D,oBAAoBkE,GAAU,WAYpDpF,UAAY,WACVzC,EAAKwH,SAAS/D,MAGhBQ,mBAAqB,WACnBjE,EAAKwH,SAAS,CAACpG,cAAe,EAAC,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,8EAGnE,OACEnB,EAAAC,EAAAC,cAACyD,EAAD,KACE3D,EAAAC,EAAAC,cAAC6B,EAAD,CACEC,WAAYpC,KAAKkE,MAAML,MACvBtC,cAAevB,KAAKkE,MAAM3C,cAC1BC,UAAWxB,KAAKwB,YAElBpB,EAAAC,EAAAC,cAACoC,EAAD,CAAeC,OAAS3C,KAAKkE,MAAMvB,OAASC,UAAW5C,KAAK4C,oBAzPjCnC,IAAMC,+cCtBzC,IAAMwH,EAAY1I,IAAOC,IAAV0I,KAoBAC,mLARX,OACEhI,EAAAC,EAAAC,cAAC4H,EAAD,KACE9H,EAAAC,EAAAC,cAAC+H,EAAD,cAJU3H,aCHE4H,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxI,EAAAC,EAAAC,cAACuI,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1bf988b9.chunk.js","sourcesContent":["import React from 'react';\r\nimport {TweenMax} from 'gsap';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledCoin = styled.div`\r\n    width: 100px;\r\n    height: 100px;\r\n    background: ${props =>  props.stateOfPosition===1? 'green': 'red' };\r\n    border-radius: 100px;\r\n    margin:10px;\r\n    opacity: 1;\r\n    position: absolute;\r\n    @media (max-width:840px) {\r\n            margin:5px;\r\n            width:50px; height:50px;\r\n        }\r\n`\r\n\r\nexport default class Coin extends React.Component{\r\n\r\n    componentDidMount(){\r\n        TweenMax.fromTo(this.coin, .8, { top: -1000}, { top: 0});\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <StyledCoin\r\n                ref={node => (this.coin = node)}\r\n                 stateOfPosition={this.props.stateOfPosition} \r\n            />\r\n        )\r\n    }\r\n\r\n}","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Coin from './Coin';\r\nconst StyledBoardPosition = styled.div`\r\n        position:relative;\r\n        width:120px; height:120px;\r\n        @media (max-width:840px) {\r\n            width:60px; height:60px;\r\n        }\r\n        margin:0;\r\n        overflow: hidden;\r\n    &:after{\r\n        content:'';\r\n        position:absolute;\r\n        left:10px; top:10px;\r\n        border-radius:100%;\r\n        width:100px; height:100px;\r\n        @media (max-width:840px) {\r\n            left: 5px;\r\n            top: 5px;\r\n            width:50px; height:50px;\r\n        }\r\n        box-shadow: 0px 0px 0px 500px yellow;\r\n        z-index: 2;\r\n    }\r\n    \r\n`\r\nexport default function BoardPosition({stateOfPosition}) { \r\n    // stateOfPosition 0=empty 1=human 2=computer\r\n    return (\r\n        <div className='relative'><StyledBoardPosition>\r\n            </StyledBoardPosition>\r\n            {\r\n                (stateOfPosition !== 0) &&  <Coin stateOfPosition={stateOfPosition}/>\r\n             \r\n            }\r\n        \r\n        </div>\r\n        \r\n\r\n    )\r\n}","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledMakeAMoveColumns = styled.div`\r\n    position: absolute;\r\n    width:100%;\r\n    height: 100%;\r\n    top:0;\r\n    display: flex;\r\n    justify-content: flex;\r\n    z-index:3;\r\n\r\n`\r\nconst  StyledMakeAMoveColumn = styled.div`\r\n    flex:1;\r\n    &:hover{\r\n        background: ${props=> !props.disabled?'rgba(0,255,0,.3)':'none'}\r\n    }\r\n`\r\n\r\nexport default function MakeAMoveColumns({possiblePlays, playATurn}){\r\n    function clickAction(Column, disabled){\r\n        if(disabled){\r\n            playATurn(Column);\r\n        }\r\n    }\r\n    return(\r\n        <StyledMakeAMoveColumns>\r\n            {\r\n                possiblePlays.map((possiblePlay,index) =>  (\r\n                    <StyledMakeAMoveColumn \r\n                        onClick={()=>clickAction(index, possiblePlay)} \r\n                        key={index} \r\n                        className={`play-column`} \r\n                        disabled={ !possiblePlay } \r\n                    />  \r\n                ))\r\n            }\r\n        </StyledMakeAMoveColumns>\r\n    )\r\n}","import React from 'react';\r\nimport BoardPosition from './BoardPosition';\r\nimport MakeAMoveColumns from './MakeAMoveColumns';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledPlayBoard = styled.div`\r\n  box-shadow: 2px 2px 1px black;\r\n`\r\n\r\nconst StyledPlayBoardRow = styled.div`\r\n  display: flex;\r\n  justify-content: space-evenly;\r\n`\r\n\r\nexport default function PlayBoard({boardState,  possiblePlays, playATurn}){\r\n  console.log(possiblePlays)\r\n    return(\r\n        <StyledPlayBoard>\r\n            {\r\n              boardState.map((row, index) => {\r\n                return (\r\n                  <StyledPlayBoardRow key={index} >\r\n                    {\r\n                    row.map((position, index)=> {\r\n                      return <BoardPosition key={index} stateOfPosition={position}/>\r\n                    })   \r\n                    }\r\n                  </StyledPlayBoardRow>\r\n                )\r\n              })\r\n            }\r\n          <MakeAMoveColumns\r\n            possiblePlays={possiblePlays}\r\n            playATurn={playATurn}\r\n          />\r\n        </StyledPlayBoard>\r\n    )\r\n}","const  initBoardState = [\r\n            [0,0,0,0,0,0,0],\r\n            [0,0,0,0,0,0,0],\r\n            [0,0,0,0,0,0,0],\r\n            [0,0,0,0,0,0,0],\r\n            [0,0,0,0,0,0,0],\r\n            [0,0,0,0,0,0,0],\r\n        ]\r\nexport default initBoardState;\r\n","import React from 'react';\r\nimport './winnerDisplay.css';\r\nexport default function WinnerDisplay({winner, resetGame}){\r\n    return (\r\n            winner!==0 && \r\n            <div className=\"winner-display\"> \r\n                <h2 className={`winner-header winner${winner}`}>{`Player ${winner} Won!`}</h2>\r\n                <button onClick={resetGame} className=\"winner-reset-button\">Play Again!</button>\r\n            </div>\r\n    )\r\n}","// takes in the state of the board and returns a col to play\r\n\r\n// const  initBoardState = [\r\n//     [0,0,0,0,0,0,0],\r\n//     [0,0,0,0,0,0,0],\r\n//     [0,0,0,0,0,0,0],\r\n//     [0,0,0,0,0,0,0],\r\n//     [0,0,0,0,0,0,0],\r\n//     [0,0,0,0,0,0,0],\r\n// ]\r\nconst playerNumber=2;\r\nconst opponentPlayerNumber=1;\r\n\r\n\r\nconst basedOnMeMultiplier = 3;\r\nconst basedOnMeOneMatchScore = 1;\r\nconst basedOnMeTwoMatchScore = 2;\r\nconst basedOnMeThreeMatchScore = 9999;\r\n\r\nconst basedOnOppenentMultiplier = 2;\r\nconst basedOnOppenentOneMatchScore = .5;\r\nconst basedOnOppenentTwoMatchScore = 2;\r\nconst basedOnOppenentThreeMatchScore = 999;\r\n\r\nconst basedOnNoPlayMultiplier = 1;\r\nconst basedOnNoPlayOneMatchScore = 1;\r\nconst basedOnNoPlayTwoMatchScore = 2;\r\nconst basedOnNoPlayThreeMatchScore = 2;\r\n\r\nexport default function decideOnPlay(boardState) {\r\n    //TOOLS\r\n    function isRight(colPos, rowPos,player){\r\n        if(boardState[colPos][rowPos+1]===player){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    function isLeft(colPos, rowPos, player){\r\n        if(boardState[colPos][rowPos-1]===player){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    function isDown(colPos, rowPos, player){\r\n        if(boardState[colPos+1] && boardState[colPos+1][rowPos]===player){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    function isUp(colPos, rowPos, player){\r\n        if(boardState[colPos-1] && boardState[colPos-1][rowPos]===player){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    function isUpRight(colPos, rowPos, player){\r\n        if(boardState[colPos-1] && boardState[colPos-1][rowPos+1]===player){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    function isUpLeft(colPos, rowPos, player){\r\n        if(boardState[colPos-1] && boardState[colPos-1][rowPos-1]===player){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    function isDownRight(colPos, rowPos, player){\r\n        if(boardState[colPos+1] && boardState[colPos+1][rowPos+1]===player){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    function isDownLeft(colPos, rowPos, player){\r\n        if(boardState[colPos+1] && boardState[colPos+1][rowPos-1]===player){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    function getScore(numberMatches,oneMatchScore,twoMatchScore,threeMatchScore){\r\n        if(numberMatches===1){\r\n            return oneMatchScore\r\n        }else if(numberMatches===2){\r\n            return twoMatchScore\r\n        }else if(numberMatches>=3){\r\n            return threeMatchScore\r\n        }\r\n        return 0;\r\n    }\r\n    // for every  spot calculate a score depending on  how many in a row\r\n    // if can't play spot give a score of -1 \r\n    const valueOfPlaysBoard = boardState.map((row, yIndex) => \r\n        row.map((spot, xIndex) => {        \r\n            //check if spot is filled\r\n            if (spot!==0){\r\n                return -99999\r\n            }\r\n            //check if spot doesn't have something under it \r\n            if (isDown(yIndex, xIndex,0)){\r\n                return -99999\r\n            }\r\n            // DONE filtering out unavailable plays\r\n            // get value base on computers players\r\n\r\n            const valueBasedOnMe = getValueOfSpot(xIndex, yIndex, playerNumber, basedOnMeMultiplier, basedOnMeOneMatchScore, basedOnMeTwoMatchScore, basedOnMeThreeMatchScore);\r\n            const valueBaseOnOtherPlayer =getValueOfSpot(xIndex, yIndex, opponentPlayerNumber, basedOnOppenentMultiplier, basedOnOppenentOneMatchScore, basedOnOppenentTwoMatchScore, basedOnOppenentThreeMatchScore);\r\n            const valueBaseOnUnplayedSpace = getValueOfSpot(xIndex, yIndex, 0 , basedOnNoPlayMultiplier, basedOnNoPlayOneMatchScore, basedOnNoPlayTwoMatchScore, basedOnNoPlayThreeMatchScore);\r\n            return   valueBasedOnMe + valueBaseOnOtherPlayer + valueBaseOnUnplayedSpace;\r\n        }) \r\n    )\r\n    function getValueOfSpot(xIndex, yIndex, checkFor, multiplier,oneMatchScore,twoMatchScore,threeMatchScore){\r\n        let leftMatch = 0; \r\n        if(isLeft(yIndex,xIndex,checkFor)){\r\n            leftMatch=1;\r\n            if(isLeft(yIndex,xIndex-1,checkFor)){\r\n                leftMatch=2;\r\n                if(isLeft(yIndex,xIndex-2,checkFor)){\r\n                    leftMatch=3;\r\n                }\r\n            }\r\n        }\r\n        let rightMatch =0;\r\n        if(isRight(yIndex,xIndex,checkFor)){\r\n            rightMatch=1;\r\n            if(isRight(yIndex,xIndex+1,checkFor)){\r\n                rightMatch=2;\r\n                if(isRight(yIndex,xIndex+2,checkFor)){\r\n                    rightMatch=3;\r\n                }\r\n            }\r\n        } \r\n        const horizontalScore = getScore(rightMatch+leftMatch,oneMatchScore,twoMatchScore,threeMatchScore);\r\n\r\n    \r\n        let vertical=0;\r\n        if(isDown(yIndex,xIndex,checkFor)){\r\n            vertical=1;\r\n            if(isDown(yIndex+1,xIndex,checkFor)){\r\n                vertical=2;\r\n                if(isDown(yIndex+2,xIndex,checkFor)){\r\n                    vertical=3;\r\n                }\r\n            }\r\n        }\r\n        const  verticalScore = getScore(vertical,oneMatchScore,twoMatchScore,threeMatchScore);\r\n        // positive slope match \r\n        let upRightMatch = 0;\r\n\r\n        if(isUpRight(yIndex,xIndex,checkFor)){\r\n            upRightMatch=1;\r\n            if(isUpRight(yIndex-1,xIndex+1,checkFor)){\r\n                upRightMatch=2;\r\n                if(isUpRight(yIndex-2,xIndex+2,checkFor)){\r\n                    upRightMatch=3;\r\n                }\r\n            }\r\n        }\r\n        let downLeftMatch = 0;            \r\n        if(isDownLeft(yIndex,xIndex,checkFor)){\r\n            downLeftMatch=1;\r\n            if(isDownLeft(yIndex+1,xIndex-1,checkFor)){\r\n                downLeftMatch=2;\r\n                if(isDownLeft(yIndex+2,xIndex-2,checkFor)){\r\n                    downLeftMatch=3;\r\n                }\r\n            }\r\n        }\r\n        const  positiveSlopeScore = getScore(upRightMatch+downLeftMatch,oneMatchScore,twoMatchScore,threeMatchScore);\r\n \r\n        //negative slope\r\n        let upLeftMatch = 0;\r\n        if(isUpLeft(yIndex,xIndex,checkFor)){\r\n            upLeftMatch=1;\r\n            if(isUpLeft(yIndex-1,xIndex-1,checkFor)){\r\n                upLeftMatch=2;\r\n                if(isUpLeft(yIndex-2,xIndex-2,checkFor)){\r\n                   upLeftMatch=3;\r\n                }\r\n            }\r\n        }\r\n        let downRightMatch = 0;            \r\n        if(isDownRight(yIndex,xIndex,checkFor)){\r\n            downRightMatch=1;\r\n            if(isDownRight(yIndex+1,xIndex+1,checkFor)){\r\n                downRightMatch=2;\r\n                if(isDownRight(yIndex+2,xIndex+2,checkFor)){\r\n                   downRightMatch=3;\r\n                }\r\n            }\r\n        }\r\n        const  negativeSlopeScore = getScore(upLeftMatch+downRightMatch,oneMatchScore,twoMatchScore,threeMatchScore);\r\n        // now try to calculate the value of it bases on how many in row in each direction\r\n        //\r\n        const playValue= verticalScore*multiplier + horizontalScore*multiplier + positiveSlopeScore*multiplier + negativeSlopeScore*multiplier;\r\n        return playValue;\r\n    }\r\n    console.table(valueOfPlaysBoard)\r\n    // get the index of the best play \r\n    // to to not allow to make play that lets other player make a winning move\r\n    //pick randomly for play if scores are equal\r\n    // for multiplier values make pick random values in range to make it feel less robotic \r\n    let max= 0;\r\n    let maxXIndex;\r\n    valueOfPlaysBoard.forEach((row, yIndex) => \r\n        row.forEach((spot, xIndex) => {\r\n              //check if spot is playable\r\n              if (spot === -99999){\r\n                return\r\n            }\r\n            // check if highest score to play\r\n            if(spot>=max){\r\n                max=spot;\r\n                maxXIndex=xIndex;\r\n            }\r\n        })\r\n    )  \r\n    console.log(maxXIndex)\r\n    return maxXIndex;\r\n}\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PlayBoard from './PlayBoard';\r\nimport PlayButtons from './PlayButtons'\r\nimport initBoardState from './initial-board-state';\r\nimport WinnerDisplay from './WinnerDisplay/WinnerDisplay'\r\nimport decideOnPlay from './connect4Brain' // THE AI for this game\r\nimport './board.css'\r\n\r\nconst initState= {\r\n  board: initBoardState,\r\n  possiblePlays: [true,true,true,true,true,true,true],\r\n  currentHeightofRows: [5,5,5,5,5,5,5],//5 is the bottom row 0 is the top row\r\n  winner: 0 // if winner changes to 1 or 2 depending on player\r\n}\r\n\r\nconst StyledBoard = styled.div`\r\n  margin: 0 auto;\r\n  width: 840px;\r\n  @media (max-width:840px) {\r\n    width: 420px;\r\n  }\r\n  display: flex;\r\n  flex-direction: column;\r\n  position: relative;\r\n`\r\n\r\nexport default class Board extends React.Component {\r\n  state = initState;\r\n  // play a turn is the control of the game\r\n  playATurn = (usersColumnToPlay) =>{\r\n    this.disableTakingATurn();\r\n    // get the users row played\r\n    // play the users play and checks if it was a winning move then make the computers play\r\n    this.makeAMove(usersColumnToPlay, 1, this.computersTurn )\r\n       //update the plays the user can play\r\n  }\r\n\r\n  computersTurn = (board) =>{\r\n    setTimeout(()=>{\r\n      const computersPlay = decideOnPlay(board);\r\n      this.makeAMove(computersPlay, 2);\r\n      this.updatePossiblePlays();\r\n    },500)\r\n\r\n  }\r\n\r\n  // check if there is a winner function if won returns player else returns 0\r\n  isWinner = (cP, rP, pP) => { // (colPlayed ( change goes left or right), rowPlayed(change goes up or down), playerPlayed) \r\n    let fdc=0;// firstDirectCount\r\n    \r\n    let sdc=0;// secondDirectionCount\r\n    const board = this.state.board;\r\n      //check how many matches  left========================\r\n      if(board[rP][cP-1]===pP){\r\n        fdc=1;\r\n        //check next space left\r\n        if(board[rP][cP-2]===pP){\r\n          fdc=2;\r\n        //check next space left\r\n          if(board[rP][cP-3]===pP){\r\n            fdc=3;\r\n          \r\n          }\r\n        }\r\n      }\r\n      //check how many matches  right\r\n      if(board[rP][cP+1]===pP){\r\n        sdc=1;\r\n        //check next space right\r\n        if(board[rP][cP+2]===pP){\r\n          sdc=2;\r\n        //check next space right\r\n          if(board[rP][cP+3]===pP){\r\n            sdc=3;\r\n          \r\n          }\r\n        }\r\n      }\r\n      // check total\r\n      if(fdc+sdc>=3){\r\n        return pP;\r\n      }\r\n    // check vertical win ===========================\r\n    //only check down because can not have any on top of current play\r\n     //check how many matches  down\r\n    // only check if 4th row up or above\r\n      if(rP<=2){\r\n        if(board[rP+1][cP]===pP){\r\n          //check next space down\r\n          if(board[rP+2][cP]===pP){\r\n          //check next space down\r\n            if(board[rP+3][cP]===pP){\r\n              return pP\r\n            }\r\n          }\r\n        }\r\n      }\r\n    // reset checks \r\n    fdc =0;\r\n    sdc= 0;\r\n    //   //check how many matches  down\r\n    // //check positive slope win=============================\r\n    //check how many matches  up right\r\n      //check if can go up 1\r\n      if(board[rP-1]){\r\n        //check 1 right up\r\n        if(board[rP-1][cP+1] ===pP){\r\n          fdc=1;\r\n          if(board[rP-2]){\r\n            // check 2 right up\r\n            if(board[rP-2][cP+2] === pP){\r\n              fdc=2;\r\n              //chack if can go up  3 \r\n              if(board[rP-3]){\r\n                // check 3 right up\r\n                if(board[rP-3][cP+3]===pP){\r\n                  fdc=3;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      //check how many matches  down left\r\n      //check if can go down 1\r\n      if(board[rP+1]){\r\n        //check 1 left down\r\n        if(board[rP+1][cP-1] ===pP){\r\n          sdc=1;\r\n          // check if can go down 2\r\n          if(board[rP+2]){\r\n            // check 2 left down\r\n            if(board[rP+2][cP-2]===pP){\r\n              sdc=2;\r\n              //chack if can go up  3 \r\n              if(board[rP+3]){\r\n                // check 3 left down\r\n                if(board[rP+3][cP-3]===pP){\r\n                  sdc=3;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if(fdc+sdc>=3){\r\n        return pP;\r\n      }\r\n      // reset \r\n      fdc=0;\r\n      sdc=0;\r\n      //check negative slop win ===============================\r\n      //check how many matches  up left\r\n      // check 1 up\r\n      if(board[rP-1]){\r\n        //check 1 left up\r\n        if(board[rP-1][cP-1] ===pP){\r\n          fdc=1;\r\n          if(board[rP-2]){\r\n            // check 2 left up\r\n            if(board[rP-2][cP-2] === pP){\r\n              fdc=2;\r\n              //chack if can go up  3 \r\n              if(board[rP-3]){\r\n                // check 3 left up\r\n                if(board[rP-3][cP-3]===pP){\r\n                  fdc=3;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      //check how many matches  down right\r\n      if(board[rP+1]){\r\n        //check 1 right down\r\n        if(board[rP+1][cP+1] ===pP){\r\n          sdc=1;\r\n          // check if can go down 2\r\n          if(board[rP+2]){\r\n            // check 2 right down\r\n            if(board[rP+2][cP+2]===pP){\r\n              sdc=2;\r\n              //chack if can go up  3 \r\n              if(board[rP+3]){\r\n                // check 3 right down\r\n                if(board[rP+3][cP+3]===pP){\r\n                  sdc=3;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if(fdc+sdc>=3){\r\n        return pP;\r\n      }\r\n      return 0;\r\n  }\r\n  // updates the board state and updates currentHeight of rows\r\n  makeAMove = (columnToPlay, player=1, callBack=()=>{}) => {\r\n    // get users row to play \r\n    const rowToPlay = this.state.currentHeightofRows[columnToPlay];\r\n    this.setState(currentState=>{\r\n      const newBoardState= currentState.board.map((rowArr,rowIndex) => {\r\n        // look for the row that is ar the right column height\r\n        if(rowIndex === currentState.currentHeightofRows[columnToPlay]){\r\n          // look for the right col in the right row\r\n          return rowArr.map((colNum, colIndex) => {\r\n            if(colIndex === columnToPlay){\r\n              return player;\r\n            }\r\n            // not right (return old value)\r\n            return colNum;\r\n          })\r\n        }\r\n        // not right (return old value)\r\n        return rowArr;\r\n      })\r\n      // set the new height of rows\r\n      const newCurrentHeightofRowsState = currentState.currentHeightofRows.map((currentHeight, colNum) => {\r\n        if(colNum === columnToPlay){\r\n          return currentHeight-1;\r\n        }\r\n        return currentHeight;\r\n      })\r\n      // check if winner \r\n      const winner = this.isWinner(columnToPlay, rowToPlay, player);\r\n      // setting\r\n      return {\r\n        board: newBoardState,\r\n        currentHeightofRows: newCurrentHeightofRowsState,\r\n        winner: winner\r\n      }\r\n    }, \r\n      () =>{\r\n        if(this.state.winner===0){\r\n          callBack(this.state.board, this.state.possiblePlays)\r\n        }\r\n      }\r\n    );\r\n\r\n  }\r\n\r\n  // update possible plays so that buttons become disabled from user\r\n  updatePossiblePlays = () => {\r\n    this.setState(currentState => {\r\n      const newPossiblePlays = currentState.possiblePlays.map((possiblePlay, colIndex) => {\r\n        if(currentState.currentHeightofRows[colIndex]<0){\r\n          return false;\r\n        }\r\n        return true;\r\n      });\r\n      return {\r\n        possiblePlays: newPossiblePlays\r\n      }\r\n    })\r\n  }\r\n  \r\n  // reset the game\r\n  resetGame = () => {\r\n    this.setState(initState);\r\n  }\r\n  // disable playing \r\n  disableTakingATurn = () => {\r\n    this.setState({possiblePlays: [false,false,false,false,false,false,false]});\r\n  }\r\n  render() {\r\n    return (\r\n      <StyledBoard>\r\n        <PlayBoard \r\n          boardState={this.state.board}\r\n          possiblePlays={this.state.possiblePlays}\r\n          playATurn={this.playATurn}\r\n        />\r\n        <WinnerDisplay winner={ this.state.winner } resetGame={this.resetGame}/>\r\n      </StyledBoard>\r\n    )\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport Board from './Components/Board'\r\nimport styled from 'styled-components'\r\nimport './App.css';\r\n\r\nconst StyledApp = styled.div`\r\n  background: #6441A5;  /* fallback for old browsers */\r\n  background: -webkit-linear-gradient(to right, #2a0845, #6441A5);  /* Chrome 10-25, Safari 5.1-6 */\r\n  background: linear-gradient(to right, #2a0845, #6441A5); /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */\r\n  min-width: 100vw;\r\n  min-height: 100vh;\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <StyledApp>\r\n        <Board />\r\n      </StyledApp>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}