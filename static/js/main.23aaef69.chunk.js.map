{"version":3,"sources":["Components/BoardPosition.jsx","Components/PlayBoard.jsx","Components/PlayButtons.jsx","Components/initial-board-state.js","Components/WinnerDisplay/WinnerDisplay.jsx","Components/Board.jsx","Components/checkersBrain.js","App.js","serviceWorker.js","index.js"],"names":["BoardPosition","_ref","stateOfPosition","react_default","a","createElement","className","concat","PlayBoard","boardState","map","row","index","key","position","PlayButtons","playATurn","possiblePlays","possiblePlay","onClick","disabled","initBoardState","WinnerDisplay","winner","resetGame","initState","board","currentHeightofRows","Board","state","usersColumnToPlay","_this","makeAMove","Math","floor","random","updatePossiblePlays","isWinner","cP","rP","pP","fdc","sdc","columnToPlay","player","arguments","length","undefined","rowToPlay","setState","currentState","rowArr","rowIndex","colNum","colIndex","currentHeight","this","React","Component","App","Board_Board","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.23aaef69.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function BoardPosition({stateOfPosition}) { \r\n    // stateOfPosition 0=empty 1=human 2=computer\r\n    return (\r\n        <div className={`position position-state-${stateOfPosition}`}></div>\r\n    )\r\n}","import React from 'react';\r\nimport BoardPosition from './BoardPosition';\r\n\r\nexport default function PlayBoard({boardState}){\r\n    return(\r\n        <div className=\"play-board\">\r\n            {\r\n              boardState.map((row, index) => {\r\n                return (\r\n                  <div key={index} className=\"play-board-row\">\r\n                    {\r\n                    row.map((position, index)=> {\r\n                      return <BoardPosition key={index} stateOfPosition={position}/>\r\n                    })   \r\n                    }\r\n                  </div>\r\n                )\r\n              })\r\n            }\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\nexport default function PlayButtons({playATurn, possiblePlays}) {\r\n    function clickAction(Column){\r\n        playATurn(Column);\r\n    }\r\n    return (\r\n        \r\n        <div className=\"play-buttons\">\r\n        {\r\n            possiblePlays.map((possiblePlay, index) => {\r\n                return (\r\n                    <button onClick={()=>clickAction(index)} key={index} className={`play-button`} disabled={ !possiblePlay } >{`Play Column ${index+1}`}</button>\r\n                )\r\n            })\r\n        }\r\n        </div>\r\n        \r\n    )\r\n}\r\n","const  initBoardState = [\r\n            [0,0,0,0,0,0,0],\r\n            [0,0,0,0,0,0,0],\r\n            [0,0,0,0,0,0,0],\r\n            [0,0,0,0,0,0,0],\r\n            [0,0,0,0,0,0,0],\r\n            [0,0,0,0,0,0,0],\r\n        ]\r\nexport default initBoardState;\r\n","import React from 'react';\r\nimport './winnerDisplay.css';\r\nexport default function WinnerDisplay({winner, resetGame}){\r\n    return (\r\n            winner!==0 && \r\n            <div className=\"winner-display\"> \r\n                <h2 className={`winner-header winner${winner}`}>{`Player ${winner} Won!`}</h2>\r\n                <button onClick={resetGame} className=\"winner-reset-button\">Play Again!</button>\r\n            </div>\r\n    )\r\n}","import React from 'react';\r\nimport PlayBoard from './PlayBoard';\r\nimport PlayButtons from './PlayButtons'\r\nimport initBoardState from './initial-board-state';\r\nimport WinnerDisplay from './WinnerDisplay/WinnerDisplay'\r\nimport decideOnPlay from './checkersBrain' // THE AI for this game\r\nimport './board.css'\r\n\r\nconst initState= {\r\n  board: initBoardState,\r\n  possiblePlays: [true,true,true,true,true,true,true],\r\n  currentHeightofRows: [5,5,5,5,5,5,5],//5 is the bottom row 0 is the top row\r\n  winner: 0 // if winner changes to 1 or 2 depending on player\r\n}\r\nexport default class Board extends React.Component {\r\n  state = initState;\r\n  // play a turn is the control of the game\r\n  playATurn = (usersColumnToPlay) =>{\r\n    // get the users row played\r\n    \r\n    // play the users play and checks if it was a winning move\r\n    this.makeAMove(usersColumnToPlay)\r\n   \r\n    // get the computers play\r\n    const computersPlay = decideOnPlay();\r\n    // play the computers play\r\n    // this.makeAMove(computersPlay, 2);\r\n    //update the plays the user can play\r\n    this.updatePossiblePlays();\r\n  }\r\n\r\n  // check if there is a winner function if won returns player else returns 0\r\n  isWinner = (cP, rP, pP) => { // (colPlayed ( change goes left or right), rowPlayed(change goes up or down), playerPlayed) \r\n    let fdc=0;// firstDirectCount\r\n    let sdc=0;// secondDirectionCount\r\n    const board = this.state.board;\r\n      //check how many matches  left========================\r\n      if(board[rP][cP-1]===pP){\r\n        fdc=1;\r\n        //check next space left\r\n        if(board[rP][cP-2]===pP){\r\n          fdc=2;\r\n        //check next space left\r\n          if(board[rP][cP-3]===pP){\r\n            fdc=3;\r\n          //check next space left\r\n          }\r\n        }\r\n      }\r\n      //check how many matches  right\r\n      if(board[rP][cP+1]===pP){\r\n        sdc=1;\r\n        //check next space right\r\n        if(board[rP][cP+2]===pP){\r\n          sdc=2;\r\n        //check next space right\r\n          if(board[rP][cP+3]===pP){\r\n            sdc=3;\r\n          //check next space right\r\n          }\r\n        }\r\n      }\r\n      // check total\r\n      if(fdc+sdc>=3){\r\n        return pP;\r\n      }\r\n    // check vertical win ===========================\r\n    //only check down because can not have any on top of current play\r\n     //check how many matches  down\r\n    // only check if 4th row up or above\r\n      if(rP<=2){\r\n        if(board[rP+1][cP]===pP){\r\n          //check next space down\r\n          if(board[rP+2][cP]===pP){\r\n          //check next space down\r\n            if(board[rP+3][cP]===pP){\r\n              return pP\r\n            }\r\n          }\r\n        }\r\n      }\r\n    // reset checks \r\n    fdc =0;\r\n    sdc= 0;\r\n    //   //check how many matches  down\r\n    // //check positive slope win=============================\r\n    //check how many matches  up right\r\n      //check if can go up 1\r\n      if(board[rP-1]){\r\n        //check 1 right up\r\n        if(board[rP-1][cP+1] ===pP){\r\n          fdc=1;\r\n          if(board[rP-2]){\r\n            // check 2 right up\r\n            if(board[rP-2][cP+2] === pP){\r\n              fdc=2;\r\n              //chack if can go up  3 \r\n              if(board[rP-3]){\r\n                // check 3 right up\r\n                if(board[rP-3][cP+3]===pP){\r\n                  fdc=3;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      //check how many matches  down left\r\n      //check if can go down 1\r\n      if(board[rP+1]){\r\n        //check 1 left down\r\n        if(board[rP+1][cP-1] ===pP){\r\n          sdc=1;\r\n          // check if can go down 2\r\n          if(board[rP+2]){\r\n            // check 2 left down\r\n            if(board[rP+2][cP-2]===pP){\r\n              sdc=2;\r\n              //chack if can go up  3 \r\n              if(board[rP+3]){\r\n                // check 3 left down\r\n                if(board[rP+3][cP-3]===pP){\r\n                  sdc=3;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if(fdc+sdc>=3){\r\n        return pP;\r\n      }\r\n      // reset \r\n      fdc=0;\r\n      sdc=0;\r\n      //check negative slop win ===============================\r\n      //check how many matches  up left\r\n      // check 1 up\r\n      if(board[rP-1]){\r\n        //check 1 left up\r\n        if(board[rP-1][cP-1] ===pP){\r\n          fdc=1;\r\n          if(board[rP-2]){\r\n            // check 2 left up\r\n            if(board[rP-2][cP-2] === pP){\r\n              fdc=2;\r\n              //chack if can go up  3 \r\n              if(board[rP-3]){\r\n                // check 3 left up\r\n                if(board[rP-3][cP-3]===pP){\r\n                  fdc=3;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      //check how many matches  down right\r\n      if(board[rP+1]){\r\n        //check 1 right down\r\n        if(board[rP+1][cP+1] ===pP){\r\n          sdc=1;\r\n          // check if can go down 2\r\n          if(board[rP+2]){\r\n            // check 2 right down\r\n            if(board[rP+2][cP+2]===pP){\r\n              sdc=2;\r\n              //chack if can go up  3 \r\n              if(board[rP+3]){\r\n                // check 3 right down\r\n                if(board[rP+3][cP+3]===pP){\r\n                  sdc=3;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if(fdc+sdc>=3){\r\n        return pP;\r\n      }\r\n      return 0;\r\n  }\r\n  // updates the board state and updates currentHeight of rows\r\n  makeAMove = (columnToPlay,  player=1) => {\r\n    // get users row to play \r\n    const rowToPlay = this.state.currentHeightofRows[columnToPlay];\r\n    this.setState(currentState=>{\r\n      const newBoardState= currentState.board.map((rowArr,rowIndex) => {\r\n        // look for the row that is ar the right column height\r\n        if(rowIndex === currentState.currentHeightofRows[columnToPlay]){\r\n          // look for the right col in the right row\r\n          return rowArr.map((colNum, colIndex) => {\r\n            if(colIndex === columnToPlay){\r\n              return player;\r\n            }\r\n            // not right (return old value)\r\n            return colNum;\r\n          })\r\n        }\r\n        // not right (return old value)\r\n        return rowArr;\r\n      })\r\n      // set the new height of rows\r\n      const newCurrentHeightofRowsState = currentState.currentHeightofRows.map((currentHeight, colNum) => {\r\n        if(colNum === columnToPlay){\r\n          return currentHeight-1;\r\n        }\r\n        return currentHeight;\r\n      })\r\n      // setting\r\n      return {\r\n        board: newBoardState,\r\n        currentHeightofRows: newCurrentHeightofRowsState\r\n      }\r\n    }, () => \r\n      // check if there is a winner and set to state\r\n      this.setState( {winner: this.isWinner(columnToPlay, rowToPlay, player)})\r\n    );\r\n\r\n  }\r\n\r\n  // update possible plays so that buttons become disabled from user\r\n  updatePossiblePlays = () => {\r\n    this.setState(currentState => {\r\n      const newPossiblePlays = currentState.possiblePlays.map((possiblePlay, colIndex) => {\r\n        if(currentState.currentHeightofRows[colIndex]<0){\r\n          return false;\r\n        }\r\n        return true;\r\n      });\r\n      return {\r\n        possiblePlays: newPossiblePlays\r\n      }\r\n    })\r\n  }\r\n  \r\n  // reset the game\r\n  resetGame = () => {\r\n    this.setState(initState);\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"play-area\">\r\n        <PlayBoard boardState={this.state.board} />\r\n        <PlayButtons playATurn={this.playATurn} possiblePlays={this.state.possiblePlays} />\r\n        <WinnerDisplay winner={ this.state.winner } resetGame={this.resetGame}/>\r\n      </div>\r\n    )\r\n  }\r\n}","// takes in the state of the board and returns a col to play\r\n\r\nexport default function decideOnPlay(boardState) {\r\n    // check if you have a 4 in a line win\r\n    // check  if you need to stop other player's 4 in a line win\r\n    // check if you need to stop other player's 2 turn win \r\n    // check if you can play for a 2 turn win \r\n    // if first turn play middle \r\n    // make set cases for early game and mix in random to make it so it doesn't follow a pattern\r\n\r\n    // make a random play\r\n    return Math.floor((Math.random()*7));\r\n}\r\n\r\n\r\n// for the future \r\n// make a function that can score each play\r\n// make a function that uses the play scorer to check future plays\r\n","import React, { Component } from 'react';\r\nimport Board from './Components/Board'\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Board />\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}